/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace td { namespace test {

struct Numberz {
  enum type {
    ONE = 1,
    TWO = 2,
    THREE = 3
  };
};

extern const std::map<int, const char*> _Numberz_VALUES_TO_NAMES;

typedef int64_t UserId;

typedef struct _Xtruct__isset {
  _Xtruct__isset() : string_thing(false) {}
  bool string_thing;
} _Xtruct__isset;

class Xtruct {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Xtruct() : string_thing() {
  }

  virtual ~Xtruct() throw() {}

  std::string string_thing;

  _Xtruct__isset __isset;

  void __set_string_thing(const std::string& val) {
    string_thing = val;
  }

  bool operator == (const Xtruct & rhs) const
  {
    if (!(string_thing == rhs.string_thing))
      return false;
    return true;
  }
  bool operator != (const Xtruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Xtruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Xtruct &a, Xtruct &b);

typedef struct _Insanity__isset {
  _Insanity__isset() : userMap(false), xtructs(false) {}
  bool userMap;
  bool xtructs;
} _Insanity__isset;

class Insanity {
 public:

  static const char* ascii_fingerprint; // = "2477BC5969C1F0390CE2055D9E537D11";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x77,0xBC,0x59,0x69,0xC1,0xF0,0x39,0x0C,0xE2,0x05,0x5D,0x9E,0x53,0x7D,0x11};

  Insanity() {
  }

  virtual ~Insanity() throw() {}

  std::map<Numberz::type, UserId>  userMap;
  std::vector<Xtruct>  xtructs;

  _Insanity__isset __isset;

  void __set_userMap(const std::map<Numberz::type, UserId> & val) {
    userMap = val;
  }

  void __set_xtructs(const std::vector<Xtruct> & val) {
    xtructs = val;
  }

  bool operator == (const Insanity & rhs) const
  {
    if (!(userMap == rhs.userMap))
      return false;
    if (!(xtructs == rhs.xtructs))
      return false;
    return true;
  }
  bool operator != (const Insanity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Insanity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Insanity &a, Insanity &b);

}} // namespace

#endif
