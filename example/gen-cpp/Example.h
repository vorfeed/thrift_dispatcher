/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Example_H
#define Example_H

#include <thrift/TDispatchProcessor.h>
#include "example_types.h"

namespace td { namespace test {

class ExampleIf {
 public:
  virtual ~ExampleIf() {}
  virtual void NoParamsNoReturn() = 0;
  virtual void HasParamsNoReturn(const std::string& thing, const Xtruct& xtruct, const Insanity& insanity) = 0;
  virtual void NoParamsHasReturn(Xtruct& _return) = 0;
  virtual void HasParamsHasReturn(Insanity& _return, const std::string& thing, const Xtruct& xtruct, const Insanity& insanity) = 0;
};

class ExampleIfFactory {
 public:
  typedef ExampleIf Handler;

  virtual ~ExampleIfFactory() {}

  virtual ExampleIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ExampleIf* /* handler */) = 0;
};

class ExampleIfSingletonFactory : virtual public ExampleIfFactory {
 public:
  ExampleIfSingletonFactory(const boost::shared_ptr<ExampleIf>& iface) : iface_(iface) {}
  virtual ~ExampleIfSingletonFactory() {}

  virtual ExampleIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ExampleIf* /* handler */) {}

 protected:
  boost::shared_ptr<ExampleIf> iface_;
};

class ExampleNull : virtual public ExampleIf {
 public:
  virtual ~ExampleNull() {}
  void NoParamsNoReturn() {
    return;
  }
  void HasParamsNoReturn(const std::string& /* thing */, const Xtruct& /* xtruct */, const Insanity& /* insanity */) {
    return;
  }
  void NoParamsHasReturn(Xtruct& /* _return */) {
    return;
  }
  void HasParamsHasReturn(Insanity& /* _return */, const std::string& /* thing */, const Xtruct& /* xtruct */, const Insanity& /* insanity */) {
    return;
  }
};


class Example_NoParamsNoReturn_args {
 public:

  Example_NoParamsNoReturn_args() {
  }

  virtual ~Example_NoParamsNoReturn_args() throw() {}


  bool operator == (const Example_NoParamsNoReturn_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Example_NoParamsNoReturn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_NoParamsNoReturn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_NoParamsNoReturn_pargs {
 public:


  virtual ~Example_NoParamsNoReturn_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_NoParamsNoReturn_result {
 public:

  Example_NoParamsNoReturn_result() {
  }

  virtual ~Example_NoParamsNoReturn_result() throw() {}


  bool operator == (const Example_NoParamsNoReturn_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Example_NoParamsNoReturn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_NoParamsNoReturn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_NoParamsNoReturn_presult {
 public:


  virtual ~Example_NoParamsNoReturn_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Example_HasParamsNoReturn_args__isset {
  _Example_HasParamsNoReturn_args__isset() : thing(false), xtruct(false), insanity(false) {}
  bool thing;
  bool xtruct;
  bool insanity;
} _Example_HasParamsNoReturn_args__isset;

class Example_HasParamsNoReturn_args {
 public:

  Example_HasParamsNoReturn_args() : thing() {
  }

  virtual ~Example_HasParamsNoReturn_args() throw() {}

  std::string thing;
  Xtruct xtruct;
  Insanity insanity;

  _Example_HasParamsNoReturn_args__isset __isset;

  void __set_thing(const std::string& val) {
    thing = val;
  }

  void __set_xtruct(const Xtruct& val) {
    xtruct = val;
  }

  void __set_insanity(const Insanity& val) {
    insanity = val;
  }

  bool operator == (const Example_HasParamsNoReturn_args & rhs) const
  {
    if (!(thing == rhs.thing))
      return false;
    if (!(xtruct == rhs.xtruct))
      return false;
    if (!(insanity == rhs.insanity))
      return false;
    return true;
  }
  bool operator != (const Example_HasParamsNoReturn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_HasParamsNoReturn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_HasParamsNoReturn_pargs {
 public:


  virtual ~Example_HasParamsNoReturn_pargs() throw() {}

  const std::string* thing;
  const Xtruct* xtruct;
  const Insanity* insanity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_HasParamsNoReturn_result {
 public:

  Example_HasParamsNoReturn_result() {
  }

  virtual ~Example_HasParamsNoReturn_result() throw() {}


  bool operator == (const Example_HasParamsNoReturn_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Example_HasParamsNoReturn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_HasParamsNoReturn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_HasParamsNoReturn_presult {
 public:


  virtual ~Example_HasParamsNoReturn_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Example_NoParamsHasReturn_args {
 public:

  Example_NoParamsHasReturn_args() {
  }

  virtual ~Example_NoParamsHasReturn_args() throw() {}


  bool operator == (const Example_NoParamsHasReturn_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Example_NoParamsHasReturn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_NoParamsHasReturn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_NoParamsHasReturn_pargs {
 public:


  virtual ~Example_NoParamsHasReturn_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Example_NoParamsHasReturn_result__isset {
  _Example_NoParamsHasReturn_result__isset() : success(false) {}
  bool success;
} _Example_NoParamsHasReturn_result__isset;

class Example_NoParamsHasReturn_result {
 public:

  Example_NoParamsHasReturn_result() {
  }

  virtual ~Example_NoParamsHasReturn_result() throw() {}

  Xtruct success;

  _Example_NoParamsHasReturn_result__isset __isset;

  void __set_success(const Xtruct& val) {
    success = val;
  }

  bool operator == (const Example_NoParamsHasReturn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Example_NoParamsHasReturn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_NoParamsHasReturn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Example_NoParamsHasReturn_presult__isset {
  _Example_NoParamsHasReturn_presult__isset() : success(false) {}
  bool success;
} _Example_NoParamsHasReturn_presult__isset;

class Example_NoParamsHasReturn_presult {
 public:


  virtual ~Example_NoParamsHasReturn_presult() throw() {}

  Xtruct* success;

  _Example_NoParamsHasReturn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Example_HasParamsHasReturn_args__isset {
  _Example_HasParamsHasReturn_args__isset() : thing(false), xtruct(false), insanity(false) {}
  bool thing;
  bool xtruct;
  bool insanity;
} _Example_HasParamsHasReturn_args__isset;

class Example_HasParamsHasReturn_args {
 public:

  Example_HasParamsHasReturn_args() : thing() {
  }

  virtual ~Example_HasParamsHasReturn_args() throw() {}

  std::string thing;
  Xtruct xtruct;
  Insanity insanity;

  _Example_HasParamsHasReturn_args__isset __isset;

  void __set_thing(const std::string& val) {
    thing = val;
  }

  void __set_xtruct(const Xtruct& val) {
    xtruct = val;
  }

  void __set_insanity(const Insanity& val) {
    insanity = val;
  }

  bool operator == (const Example_HasParamsHasReturn_args & rhs) const
  {
    if (!(thing == rhs.thing))
      return false;
    if (!(xtruct == rhs.xtruct))
      return false;
    if (!(insanity == rhs.insanity))
      return false;
    return true;
  }
  bool operator != (const Example_HasParamsHasReturn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_HasParamsHasReturn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Example_HasParamsHasReturn_pargs {
 public:


  virtual ~Example_HasParamsHasReturn_pargs() throw() {}

  const std::string* thing;
  const Xtruct* xtruct;
  const Insanity* insanity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Example_HasParamsHasReturn_result__isset {
  _Example_HasParamsHasReturn_result__isset() : success(false) {}
  bool success;
} _Example_HasParamsHasReturn_result__isset;

class Example_HasParamsHasReturn_result {
 public:

  Example_HasParamsHasReturn_result() {
  }

  virtual ~Example_HasParamsHasReturn_result() throw() {}

  Insanity success;

  _Example_HasParamsHasReturn_result__isset __isset;

  void __set_success(const Insanity& val) {
    success = val;
  }

  bool operator == (const Example_HasParamsHasReturn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Example_HasParamsHasReturn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Example_HasParamsHasReturn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Example_HasParamsHasReturn_presult__isset {
  _Example_HasParamsHasReturn_presult__isset() : success(false) {}
  bool success;
} _Example_HasParamsHasReturn_presult__isset;

class Example_HasParamsHasReturn_presult {
 public:


  virtual ~Example_HasParamsHasReturn_presult() throw() {}

  Insanity* success;

  _Example_HasParamsHasReturn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ExampleClient : virtual public ExampleIf {
 public:
  ExampleClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ExampleClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void NoParamsNoReturn();
  void send_NoParamsNoReturn();
  void recv_NoParamsNoReturn();
  void HasParamsNoReturn(const std::string& thing, const Xtruct& xtruct, const Insanity& insanity);
  void send_HasParamsNoReturn(const std::string& thing, const Xtruct& xtruct, const Insanity& insanity);
  void recv_HasParamsNoReturn();
  void NoParamsHasReturn(Xtruct& _return);
  void send_NoParamsHasReturn();
  void recv_NoParamsHasReturn(Xtruct& _return);
  void HasParamsHasReturn(Insanity& _return, const std::string& thing, const Xtruct& xtruct, const Insanity& insanity);
  void send_HasParamsHasReturn(const std::string& thing, const Xtruct& xtruct, const Insanity& insanity);
  void recv_HasParamsHasReturn(Insanity& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ExampleProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ExampleIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ExampleProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_NoParamsNoReturn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HasParamsNoReturn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_NoParamsHasReturn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_HasParamsHasReturn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ExampleProcessor(boost::shared_ptr<ExampleIf> iface) :
    iface_(iface) {
    processMap_["NoParamsNoReturn"] = &ExampleProcessor::process_NoParamsNoReturn;
    processMap_["HasParamsNoReturn"] = &ExampleProcessor::process_HasParamsNoReturn;
    processMap_["NoParamsHasReturn"] = &ExampleProcessor::process_NoParamsHasReturn;
    processMap_["HasParamsHasReturn"] = &ExampleProcessor::process_HasParamsHasReturn;
  }

  virtual ~ExampleProcessor() {}
};

class ExampleProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ExampleProcessorFactory(const ::boost::shared_ptr< ExampleIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ExampleIfFactory > handlerFactory_;
};

class ExampleMultiface : virtual public ExampleIf {
 public:
  ExampleMultiface(std::vector<boost::shared_ptr<ExampleIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ExampleMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ExampleIf> > ifaces_;
  ExampleMultiface() {}
  void add(boost::shared_ptr<ExampleIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void NoParamsNoReturn() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NoParamsNoReturn();
    }
    ifaces_[i]->NoParamsNoReturn();
  }

  void HasParamsNoReturn(const std::string& thing, const Xtruct& xtruct, const Insanity& insanity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HasParamsNoReturn(thing, xtruct, insanity);
    }
    ifaces_[i]->HasParamsNoReturn(thing, xtruct, insanity);
  }

  void NoParamsHasReturn(Xtruct& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->NoParamsHasReturn(_return);
    }
    ifaces_[i]->NoParamsHasReturn(_return);
    return;
  }

  void HasParamsHasReturn(Insanity& _return, const std::string& thing, const Xtruct& xtruct, const Insanity& insanity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->HasParamsHasReturn(_return, thing, xtruct, insanity);
    }
    ifaces_[i]->HasParamsHasReturn(_return, thing, xtruct, insanity);
    return;
  }

};

}} // namespace

#endif
